require 'ffi'

require 'aix/errlog/constants'

module AIX
  module Errlog
    ##
    # An errlog entry class.  Used to parse the raw errlog_entry_t struct into a
    # more useful Ruby object.
    # 
    # You shouldn't need to invoke this class directly; it is generated by the
    # each methods on AIX::Errlog::Errlog.
    class Entry
      attr_reader :magic, :sequence, :label, :timestamp, :crcid, :errdiag, :machineid, :nodeid, :class, :type, :resource, :rclass, :rtype, :vpd_ibm, :vpd_user, :in, :connwhere, :flags, :detail, :symptom, :dup_count, :dup_time1, :dup_time2, :wparid

      def initialize(raw)
        @magic = raw[:el_magic]
        @sequence = raw[:el_sequence]
        @label = raw[:el_label].to_s.freeze
        @timestamp = Time.at(raw[:el_timestamp]).freeze
        @crcid = raw[:el_crcid]
        @errdiag = raw[:el_errdiag]
        @machineid = raw[:el_machineid].to_s.freeze
        @nodeid = raw[:el_nodeid].to_s.freeze
        @class = raw[:el_class].to_s.freeze
        @type = raw[:el_type].to_s.freeze
        @resource = raw[:el_resource].to_s.freeze
        @rclass = raw[:el_rclass].to_s.freeze
        @rtype = raw[:el_rtype].to_s.freeze
        @vpd_ibm = raw[:el_vpd_ibm].to_s.freeze
        @vpd_user = raw[:el_vpd_user].to_s.freeze
        @in = raw[:el_in].to_s
        @connwhere = raw[:el_connwhere].to_s.freeze
        @flags = raw[:el_flags]
        length = raw[:el_detail_length]
        @detail = raw[:el_detail_data].to_ptr.get_bytes(0, length).freeze
        length = raw[:el_symptom_length]
        @symptom = raw[:el_symptom_data].to_ptr.get_bytes(0, length).freeze
        @dup_count = raw[:el_errdup][:ed_dupcount]
        @dup_time1 = Time.at(raw[:el_errdup][:ed_time1]).freeze
        @dup_time2 = Time.at(raw[:el_errdup][:ed_time2]).freeze
        @wparid = raw[:el_wparid].to_s.freeze
      end
    end
  end
end
