var search_data = {"index":{"searchIndex":["aix","errlog","constants","entry","errlog","errors","enumeratorerror","errlogerror","io","invalidargument","invalidfile","nofile","nomem","unknownerror","lib","errdup","errlogentry","errlogmatch","errlogmatch1u","errlogmatch2u","match","!()","!=()","&()","<()","<=()","==()",">()",">=()","^()","class()","close()","connwhere()","crcid()","detail()","detail_data()","errdiag()","errpt()","flag_err64()","flag_errdup()","forward_each()","in()","include?()","label()","machineid()","match()","match()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nodeid()","open()","open()","parse_errpt()","rclass()","resource()","reverse_each()","rtype()","sequence()","symptom()","symptom_data()","throw()","timestamp()","to_struct()","type()","vpd_ibm()","vpd_user()","wparid()","|()","gemfile","license","readme","aix-errlog.gemspec","main"],"longSearchIndex":["aix","aix::errlog","aix::errlog::constants","aix::errlog::entry","aix::errlog::errlog","aix::errlog::errors","aix::errlog::errors::enumeratorerror","aix::errlog::errors::errlogerror","aix::errlog::errors::io","aix::errlog::errors::invalidargument","aix::errlog::errors::invalidfile","aix::errlog::errors::nofile","aix::errlog::errors::nomem","aix::errlog::errors::unknownerror","aix::errlog::lib","aix::errlog::lib::errdup","aix::errlog::lib::errlogentry","aix::errlog::lib::errlogmatch","aix::errlog::lib::errlogmatch1u","aix::errlog::lib::errlogmatch2u","aix::errlog::match","aix::errlog::match#!()","aix::errlog::match#!=()","aix::errlog::match#&()","aix::errlog::match#<()","aix::errlog::match#<=()","aix::errlog::match#==()","aix::errlog::match#>()","aix::errlog::match#>=()","aix::errlog::match#^()","aix::errlog::match::class()","aix::errlog::errlog#close()","aix::errlog::match::connwhere()","aix::errlog::match::crcid()","aix::errlog::entry#detail()","aix::errlog::match::detail_data()","aix::errlog::match::errdiag()","aix::errlog::entry#errpt()","aix::errlog::match::flag_err64()","aix::errlog::match::flag_errdup()","aix::errlog::errlog#forward_each()","aix::errlog::match::in()","aix::errlog::match#include?()","aix::errlog::match::label()","aix::errlog::match::machineid()","aix::errlog::errlog#match()","aix::errlog::errlog::match()","aix::errlog::entry::new()","aix::errlog::errlog::new()","aix::errlog::errors::enumeratorerror::new()","aix::errlog::errors::io::new()","aix::errlog::errors::invalidargument::new()","aix::errlog::errors::invalidfile::new()","aix::errlog::errors::nofile::new()","aix::errlog::errors::nomem::new()","aix::errlog::errors::unknownerror::new()","aix::errlog::match::new()","aix::errlog::match::nodeid()","aix::errlog::open()","aix::errlog::errlog::open()","aix::errlog::entry#parse_errpt()","aix::errlog::match::rclass()","aix::errlog::match::resource()","aix::errlog::errlog#reverse_each()","aix::errlog::match::rtype()","aix::errlog::match::sequence()","aix::errlog::entry#symptom()","aix::errlog::match::symptom_data()","aix::errlog::errors::throw()","aix::errlog::match::timestamp()","aix::errlog::match#to_struct()","aix::errlog::match::type()","aix::errlog::match::vpd_ibm()","aix::errlog::match::vpd_user()","aix::errlog::match::wparid()","aix::errlog::match#|()","","","","",""],"info":[["AIX","","AIX.html","",""],["AIX::Errlog","","AIX/Errlog.html","",""],["AIX::Errlog::Constants","","AIX/Errlog/Constants.html","",""],["AIX::Errlog::Entry","","AIX/Errlog/Entry.html","","<p>An errlog entry class.  Used to parse the raw errlog_entry_t struct into a\nmore useful Ruby object.\n<p>You …\n"],["AIX::Errlog::Errlog","","AIX/Errlog/Errlog.html","","<p>The core errlog class.  Used to open an errlog file.\n<p>The main method that should be used here is ::open …\n"],["AIX::Errlog::Errors","","AIX/Errlog/Errors.html","",""],["AIX::Errlog::Errors::EnumeratorError","","AIX/Errlog/Errors/EnumeratorError.html","",""],["AIX::Errlog::Errors::ErrlogError","","AIX/Errlog/Errors/ErrlogError.html","",""],["AIX::Errlog::Errors::IO","","AIX/Errlog/Errors/IO.html","",""],["AIX::Errlog::Errors::InvalidArgument","","AIX/Errlog/Errors/InvalidArgument.html","",""],["AIX::Errlog::Errors::InvalidFile","","AIX/Errlog/Errors/InvalidFile.html","",""],["AIX::Errlog::Errors::NoFile","","AIX/Errlog/Errors/NoFile.html","",""],["AIX::Errlog::Errors::NoMem","","AIX/Errlog/Errors/NoMem.html","",""],["AIX::Errlog::Errors::UnknownError","","AIX/Errlog/Errors/UnknownError.html","",""],["AIX::Errlog::Lib","","AIX/Errlog/Lib.html","","<p>The ffi interface to the errlog library.\n<p>You should never need to access this directly.  All necessary …\n"],["AIX::Errlog::Lib::Errdup","","AIX/Errlog/Lib/Errdup.html","",""],["AIX::Errlog::Lib::ErrlogEntry","","AIX/Errlog/Lib/ErrlogEntry.html","",""],["AIX::Errlog::Lib::ErrlogMatch","","AIX/Errlog/Lib/ErrlogMatch.html","",""],["AIX::Errlog::Lib::ErrlogMatch1U","","AIX/Errlog/Lib/ErrlogMatch1U.html","",""],["AIX::Errlog::Lib::ErrlogMatch2U","","AIX/Errlog/Lib/ErrlogMatch2U.html","",""],["AIX::Errlog::Match","","AIX/Errlog/Match.html","","<p>A class that is useful for building errlog matchers.\n<p>You usually won&#39;t need to access this class directly; …\n"],["!","AIX::Errlog::Match","AIX/Errlog/Match.html#method-i-21","()",""],["!=","AIX::Errlog::Match","AIX/Errlog/Match.html#method-i-21-3D","(other)",""],["&","AIX::Errlog::Match","AIX/Errlog/Match.html#method-i-26","(other)",""],["<","AIX::Errlog::Match","AIX/Errlog/Match.html#method-i-3C","(other)",""],["<=","AIX::Errlog::Match","AIX/Errlog/Match.html#method-i-3C-3D","(other)",""],["==","AIX::Errlog::Match","AIX/Errlog/Match.html#method-i-3D-3D","(other)",""],[">","AIX::Errlog::Match","AIX/Errlog/Match.html#method-i-3E","(other)",""],[">=","AIX::Errlog::Match","AIX/Errlog/Match.html#method-i-3E-3D","(other)",""],["^","AIX::Errlog::Match","AIX/Errlog/Match.html#method-i-5E","(other)",""],["class","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-class","()","<p>Match convenience function.  Gets a Leaf match for comparing against class.\n"],["close","AIX::Errlog::Errlog","AIX/Errlog/Errlog.html#method-i-close","()","<p>Closes the handle.  This must be called, either directly or indirectly\nthrough ::open with a block.  …\n"],["connwhere","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-connwhere","()","<p>Match convenience function.  Gets a Leaf match for comparing against\nconnwhere.\n"],["crcid","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-crcid","()","<p>Match convenience function.  Gets a Leaf match for comparing against crcid.\n"],["detail","AIX::Errlog::Entry","AIX/Errlog/Entry.html#method-i-detail","()",""],["detail_data","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-detail_data","()","<p>Match convenience function.  Gets a Leaf match for comparing against\ndetail_data.\n"],["errdiag","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-errdiag","()","<p>Match convenience function.  Gets a Leaf match for comparing against\nerrdiag.\n"],["errpt","AIX::Errlog::Entry","AIX/Errlog/Entry.html#method-i-errpt","()",""],["flag_err64","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-flag_err64","()","<p>Match convenience function.  Gets a Leaf match for comparing against\nflag_err64.\n"],["flag_errdup","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-flag_errdup","()","<p>Match convenience function.  Gets a Leaf match for comparing against\nflag_errdup.\n"],["forward_each","AIX::Errlog::Errlog","AIX/Errlog/Errlog.html#method-i-forward_each","(matcher=nil, &block)","<p>Enumerate log Entry objects in forward order (default is reverse).  If no\nblock is given, returns an …\n"],["in","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-in","()","<p>Match convenience function.  Gets a Leaf match for comparing against in.\n"],["include?","AIX::Errlog::Match","AIX/Errlog/Match.html#method-i-include-3F","(other)",""],["label","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-label","()","<p>Match convenience function.  Gets a Leaf match for comparing against label.\n"],["machineid","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-machineid","()","<p>Match convenience function.  Gets a Leaf match for comparing against\nmachineid.\n"],["match","AIX::Errlog::Errlog","AIX/Errlog/Errlog.html#method-i-match","(&block)","<p>Calls ::match\n"],["match","AIX::Errlog::Errlog","AIX/Errlog/Errlog.html#method-c-match","(&block)","<p>Used to build a match expression using a DSL.  This simply calls\ninstance_eval on Match, so remember …\n"],["new","AIX::Errlog::Entry","AIX/Errlog/Entry.html#method-c-new","(raw)",""],["new","AIX::Errlog::Errlog","AIX/Errlog/Errlog.html#method-c-new","(path='/var/adm/ras/errlog'.freeze, mode='r'.freeze)","<p>path is the string path to the file. mode matches as closely as possible to\nthe semantics of the fopen …\n"],["new","AIX::Errlog::Errors::EnumeratorError","AIX/Errlog/Errors/EnumeratorError.html#method-c-new","()",""],["new","AIX::Errlog::Errors::IO","AIX/Errlog/Errors/IO.html#method-c-new","(message)",""],["new","AIX::Errlog::Errors::InvalidArgument","AIX/Errlog/Errors/InvalidArgument.html#method-c-new","(message)",""],["new","AIX::Errlog::Errors::InvalidFile","AIX/Errlog/Errors/InvalidFile.html#method-c-new","(message)",""],["new","AIX::Errlog::Errors::NoFile","AIX/Errlog/Errors/NoFile.html#method-c-new","(message)",""],["new","AIX::Errlog::Errors::NoMem","AIX/Errlog/Errors/NoMem.html#method-c-new","(message)",""],["new","AIX::Errlog::Errors::UnknownError","AIX/Errlog/Errors/UnknownError.html#method-c-new","(message)",""],["new","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-new","(left:, operator: nil, right: nil)",""],["nodeid","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-nodeid","()","<p>Match convenience function.  Gets a Leaf match for comparing against\nnodeid.\n"],["open","AIX::Errlog","AIX/Errlog.html#method-c-open","(*args, &block)","<p>Simple convenince shortcut to access AIX::Errlog::Errlog.open\n"],["open","AIX::Errlog::Errlog","AIX/Errlog/Errlog.html#method-c-open","(*args)","<p>Opens the given error log.  Arguments are passed directly into ::new\n<p>If a block is given, #close will …\n"],["parse_errpt","AIX::Errlog::Entry","AIX/Errlog/Entry.html#method-i-parse_errpt","()",""],["rclass","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-rclass","()","<p>Match convenience function.  Gets a Leaf match for comparing against\nrclass.\n"],["resource","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-resource","()","<p>Match convenience function.  Gets a Leaf match for comparing against\nresource.\n"],["reverse_each","AIX::Errlog::Errlog","AIX/Errlog/Errlog.html#method-i-reverse_each","(matcher=nil, &block)","<p>Enumerate log Entry objects in reverse order (default is reverse).  If no\nblock is given, returns an …\n"],["rtype","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-rtype","()","<p>Match convenience function.  Gets a Leaf match for comparing against rtype.\n"],["sequence","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-sequence","()","<p>Match convenience function.  Gets a Leaf match for comparing against\nsequence.\n"],["symptom","AIX::Errlog::Entry","AIX/Errlog/Entry.html#method-i-symptom","()",""],["symptom_data","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-symptom_data","()","<p>Match convenience function.  Gets a Leaf match for comparing against\nsymptom_data.\n"],["throw","AIX::Errlog::Errors","AIX/Errlog/Errors.html#method-c-throw","(status, detail)",""],["timestamp","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-timestamp","()","<p>Match convenience function.  Gets a Leaf match for comparing against\ntimestamp.\n"],["to_struct","AIX::Errlog::Match","AIX/Errlog/Match.html#method-i-to_struct","()","<p>Uses the structure of this object to build a errlog_match_t structure. Does\nnot check whether operators …\n"],["type","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-type","()","<p>Match convenience function.  Gets a Leaf match for comparing against type.\n"],["vpd_ibm","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-vpd_ibm","()","<p>Match convenience function.  Gets a Leaf match for comparing against\nvpd_ibm.\n"],["vpd_user","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-vpd_user","()","<p>Match convenience function.  Gets a Leaf match for comparing against\nvpd_user.\n"],["wparid","AIX::Errlog::Match","AIX/Errlog/Match.html#method-c-wparid","()","<p>Match convenience function.  Gets a Leaf match for comparing against\nwparid.\n"],["|","AIX::Errlog::Match","AIX/Errlog/Match.html#method-i-7C","(other)",""],["Gemfile","","Gemfile.html","","<p>source “rubygems.org”\n<p>gemspec\n"],["LICENSE","","LICENSE.html","","<p>MIT License\n<p>Copyright © 2018 Taylor C. Richberger\n<p>Permission is hereby granted, free of charge, to any …\n"],["README","","README_md.html","","<p>aix-errlog\n<p>Ruby gem for interfacing with AIX&#39;s error logging facilities. Uses ruby\nffi.\nFor documentation ...\n"],["aix-errlog.gemspec","","aix-errlog_gemspec.html","","<p>require &#39;rubygems&#39;\n<p>Gem::Specification.new do |spec|\n\n<pre>spec.name       = &#39;aix-errlog&#39;\nspec.version ...</pre>\n"],["main","","main_rdoc.html","","<p>This is the documentation for the aix-errlog ruby gem.\n<p>To get started, look at AIX::Errlog::Errlog.   …\n"]]}}